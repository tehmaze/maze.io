[cooked]
source          = maze/
source_posts    = %(source)s/_post
source_layout   = %(source)s/_layout
target          = %(source)s/_site
; What file patterns are parsed? Files that do not match these patterns are
; simply copied as-is. Make sure you have a matching reader configured for
; the file extension (see below).
pattern         = *.html, *.htm, *.xml
minify          = True
; Default character encoding
encoding        = utf-8

[post]
; What pattern should a post have? The following regexp groups are required:
;  -  year
;  -  month
;  -  day
;  -  slug
;  -  extension
; You may override any of these variables in the header of the post
pattern         = (?P<year>\d+)[/-](?P<month>\d+)[/-](?P<day>\d+)[/-](?P<slug>.*)(?P<extension>\.[^.]+)$
; Default template for posts
template        = post.html
; Target file name when rendering the post
target          = {year:04d}/{month:02d}/{day:02d}/{slug}.html

[archive]
; Default templats for archives
template        = archive.html
; Archive directories
target_ymd      = {year:04d}/{month:02d}/{day:02d}/index.html
target_ym       = {year:04d}/{month:02d}/index.html
target_y        = {year:04d}/index.html

; Site template variables
; -----------------------
;
; These variables are available in all template contexts provided by Cooked
[site]
title           = maze.io
tagline         = Python, development, hacking and stuff
href            = https://maze.io
author          = maze

; Reader for file extensions
; --------------------------
[reader]
default 		= null
.bb             = bbcode
.bbcode         = bbcode
.md             = markdown
.markdown       = markdown
.tt             = textile
.textile        = textile
.rst            = restructuredtext
.txt            = restructuredtext

; Filter for file extensions
; --------------------------
;
; These filters are for post-processing, and allow you for example to
; compress/minify CSS and JavaScript. Keep in mind that we are passing
; these commands to Python's format function, so you will have to escape
; curly braces. You can use the following variables:
;   {stdin}, {stderr}, {stdout}, {filename}
[filter]
; If we hit an error, ignore the error and continue the output?
ignore_errors   = True
; Path to tiny binary
tidy            = /usr/local/bin/tidy
; Path to optipng binary
optipng         = /usr/local/bin/optipng
; Path to yuicompressor binary
yuicompressor   = /usr/local/bin/yuicompressor
; File patterns
*.css           = %(yuicompressor)s --type css
*.html          = %(tidy)s -utf8 -quiet --tidy-mark no
*.js            = %(yuicompressor)s --type js
*.xml           = %(tidy)s -xml -utf8 -quiet

; BBCode formatter defaults
; -------------------------
;
; Defaults passed to the BBCode formatter
[format:bbcode]
escape_html     = False

; Markdown formatter defaults
; ---------------------------
;
; Defaults passed to the Markdown formatter, as available from
; http://packages.python.org/Markdown/reference.html#markdown
[format:markdown]
extensions      = abbr, codehilite, def_list, footnotes
output_format   = html5

; reSructuredText formatter defaults
; ----------------------------------
[formatter:restructuredtext]
initial_header_level = 2

; Textile formatter defaults
; --------------------------
;
; Defaults passed to the Textile formatter
[format:textile]
auto_link       = True
head_offset     = 1
html_type       = html
